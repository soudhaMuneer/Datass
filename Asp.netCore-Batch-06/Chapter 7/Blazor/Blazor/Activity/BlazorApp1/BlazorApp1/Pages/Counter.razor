@page "/counter/{stValue:int}"
@page "/counter"
@layout MainLayout

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>
<p>@message</p>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    [Parameter]
    public int IncrementAmount { get; set; } = 1;
    [Parameter]
    public int stValue { get; set; } = 0;

    private string message = "Not set";

    // SetParametersAsync: 
    // sets parameters supplied by the component's parent in the render tree or from route parameters.

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }


    //OnInitialized:
    //OnInitialized and OnInitializedAsync are invoked when the component is initialized
    // after having received its initial parameters in SetParametersAsync.
    protected override void OnInitialized()
    {
        message = $"Initialized at {DateTime.Now}";
    }


    //OnParametersSet or OnParametersSetAsync are called:
    //After the component is initialized in OnInitialized or OnInitializedAsync.
    protected override void OnParametersSet()
    {
        currentCount = stValue;
        base.OnParametersSet();
    }


    // OnAfterRender and OnAfterRenderAsync are called after a component has finished rendering.
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }


    //ShouldRender is called each time a component is rendered.
    // Override ShouldRender to manage UI refreshing.
    // If the implementation returns true, the UI is refreshed.
    protected override bool ShouldRender()
    {
        // return false;
        return base.ShouldRender();
    }

  
    private void IncrementCount()
    {
        currentCount+=IncrementAmount;
    }
}
