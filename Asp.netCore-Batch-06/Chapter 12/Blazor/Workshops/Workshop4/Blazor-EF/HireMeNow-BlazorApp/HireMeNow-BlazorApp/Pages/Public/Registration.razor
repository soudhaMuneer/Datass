@page "/register"
@using AutoMapper;
@using HireMeNow_BlazorApp.Dtos;
@using HireMeNow_BlazorApp.Exceptions;
@using HireMeNow_BlazorApp.Interfaces;
@layout LoginLayout
@inject IUserService _userService
@inject NavigationManager NavManager
@inject IMapper _mapper;
@using System.ComponentModel
@using HireMeNow_BlazorApp.Models;
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
<link href="publicassets/css/loginstyle.css" rel="stylesheet" />
<div class=" containerDiv">

    <div class="col-md-8 wrapperRegDiv">
        <div class="col-md-6 leftDiv">
            <div>
                <div class="regDiv">
                    <EditForm Model="@user" OnValidSubmit="Register">
                        
                        <font size="6" face="DM Sans"> <b>Registration</b> </font>
                        <br /><br />
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <p class="errors">@Error</p>
                        <div class="row">
                            <div class="col-md-6 ">
                                <b>First Name</b>
                                <br>
                                <input @bind="user.FirstName" type="text" class="form-control" placeholder="Enter FirstName" id="fname" size="30" required="">
                                <span asp-validation-for="FirstName"></span>
                            </div>
                            <div class="col-md-6">
                                <b>Last Name</b>
                                <br>
                                <input @bind="user.LastName" type="text" class="form-control" placeholder="Enter Last Name" id="lname" size="30" required="">
                                <span asp-validation-for="LastName"></span>
                            </div>

                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-6">
                                <b>Email</b>
                                <br>
                                <input @bind="user.Email" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter Email">
                                <span asp-validation-for="Email"></span>
                                <ValidationMessage For="@(() => user.Email)" />
                            </div>
                            <div class="col-md-6">
                                <b>Phone number</b>
                                <br>
                                <input @bind="user.Phone" type="text" class="form-control" pattern="^\d{10}$" placeholder="Enter Phone Number" id="lname" size="30" required="">
                                <span asp-validation-for="Phone"></span>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-6">
                                <b>Password</b>
                                <br>
                                <input @bind="user.Password" type="password" class="form-control" placeholder="Enter Password" id="fname" size="30" required="">
                                <span asp-validation-for="Password"></span>
                            </div>
                            <div class="col-md-6">
                                <b>Confirm Password</b>
                                <br>
                                <input type="password" @bind="user.ConfirmPassword" class="form-control" placeholder=" Confirm Password" id="lname" size="30" required="">
                                
                            </div>
                        </div>

                        <br />
                        <div class="row">
                            <div class="col-md-12">
                                <b>Gender</b> <br>
                                <br>
                                <b>
                                    
                                    <label>
                                        <input type="radio" name="gender" value="Male"  @oninput="()=> SetGender('M')" />
                                        Male
                                    </label>

                                    <label>
                                        <input type="radio" name="gender" value="Female" @oninput="()=> SetGender('F')" />
                                        Female
                                    </label>
                                    <label>
                                        <input type="radio" name="gender" value="Other" @oninput="()=> SetGender('O')" />
                                        Other
                                    </label>



                                </b>
                            </div>
                        </div>
                        <br />
                        <div class="row mainDiv registerDivFooter">
                            <div class="col-md-8  ">
                                <input class="btn btn-outline-primary full" type="submit"  value="Register"> <br>
                                <br>
                                <font size="3" face="Roboto"> Already have an account?  </font> <a href="./login"><font color="49A1D3" size="3" face="Roboto"> Sign in </font></a>


                            </div>
                        </div>
                        <br />
                    </EditForm>

                </div>

            </div>
        </div>
        <div class="col-md-5 rightDiv">
            <div>
            </div>
        </div>
        <div class="col-md-1"><div></div></div>

    </div>

</div>

@code {
    //[Parameter]
    //public string FirstName { get; set; }

    //[Parameter]
    //public string LastName { get; set; }
    //[Parameter]
    //public string Email { get; set; }

    //[Parameter]
    //public string Phone { get; set; }


    //[Parameter]
    //public string Password { get; set; }
    //[Parameter]
    //public string ConfirmPassword { get; set; }

    [Parameter]
    public string Error { get; set; }

    [Parameter]
    public UserDto user { get; set; } = new();

    private void SetGender(char gender)
    {
        switch (gender)
        {
            case 'M' :
                user.Gender = "Male";
                break;
            case 'F':
                user.Gender = "Female";
                break;
            case 'O':
                user.Gender = "Others";
                break;
        }

    }

    private void Register()
    {
        Error = "";
        try
        {
            var userModel = _mapper.Map<User>(user);
            var result = _userService.register(userModel);
            if (result != null)
            {
                NavManager.NavigateTo("/login");
            }
        }
        catch (UserAlreadyExistException ex)
        {
            var validationMessageStore = new ValidationMessageStore(new EditContext(user));
            validationMessageStore.Add(new FieldIdentifier(user, nameof(user.Email)), "The name 'John' is not allowed.");
            StateHasChanged();
            Error = "User Already Registered With This Email Id";
            return;
        }
        catch(Exception ex)
        {
            NavManager.NavigateTo("/");
        }
    }

}
